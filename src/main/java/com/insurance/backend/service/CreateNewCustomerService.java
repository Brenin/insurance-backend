package com.insurance.backend.service;

import com.insurance.backend.dto.exceptions.CustomerNotFoundException;
import com.insurance.backend.dto.internal.Person;
import com.insurance.backend.dto.operations.NewCustomerRequest;
import com.insurance.backend.repository.AddressRepository;
import com.insurance.backend.repository.CitizenshipRepository;
import com.insurance.backend.repository.PersonRepository;
import com.insurance.backend.repository.entity.AddressEntity;
import com.insurance.backend.repository.entity.CitizenshipEntity;
import com.insurance.backend.repository.entity.PersonEntity;
import lombok.NonNull;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.UUID;

@Service
public class CreateNewCustomerService {

    private final PersonRepository      personRepository;
    private final AddressRepository     addressRepository;
    private final CitizenshipRepository citizenshipRepository;
    private final ModelMapper           modelMapper;

    @Autowired
    public CreateNewCustomerService(PersonRepository personRepository, AddressRepository addressRepository, CitizenshipRepository citizenshipRepository,
                                    ModelMapper modelMapper
    ) {
        this.addressRepository = addressRepository;
        this.citizenshipRepository = citizenshipRepository;
        this.personRepository = personRepository;
        this.modelMapper = modelMapper;
    }

    @Transactional
    public String createNewCustomer(@NonNull NewCustomerRequest request) {

        Person person = modelMapper.map(request.getPersonData(), Person.class);

        CitizenshipEntity existingClient = citizenshipRepository.checkIfCustomerAlreadyExistsByPinAndCountry(person.getPin(), person.getCitizenshipCountryCode());
        if (existingClient != null) {
            // Should never really throw an exception since we have a FK NON NULL relationship
            PersonEntity personEntity = personRepository.findByCitizenship(existingClient)
                    .orElseThrow(() -> new CustomerNotFoundException("Pin [" + existingClient.getPin() + "] belongs to an existing customer that could not be found"));

            return personEntity.getClientIdentification().toString();
        }

        CitizenshipEntity citizenshipEntity = modelMapper.map(person, CitizenshipEntity.class);
        PersonEntity      personEntity      = modelMapper.map(person, PersonEntity.class);
        AddressEntity     addressEntity     = modelMapper.map(request.getAddress(), AddressEntity.class);

        // This will be our client identification but it should really be generated by an specific algorithm to conform to business standards
        personEntity.setClientIdentification(UUID.randomUUID());

        addressRepository.save(addressEntity);
        citizenshipRepository.save(citizenshipEntity);

        personEntity.setAddress(addressEntity);
        personEntity.setCitizenship(citizenshipEntity);

        personRepository.save(personEntity);

        return personEntity.getClientIdentification().toString();
    }
}
