package com.insurance.backend.service;

import com.insurance.backend.dto.operations.NewContractRequest;
import com.insurance.backend.repository.ContractRepository;
import com.insurance.backend.repository.PersonRepository;
import com.insurance.backend.repository.entity.ContractEntity;
import com.insurance.backend.repository.entity.PersonEntity;
import lombok.NonNull;
import org.modelmapper.ModelMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.UUID;

@Service
public class CreateNewContractService {

    private final ContractRepository contractRepository;
    private final PersonRepository   personRepository;
    private final ModelMapper        modelMapper;

    @Autowired
    public CreateNewContractService(ContractRepository contractRepository, PersonRepository personRepository, ModelMapper modelMapper) {
        this.contractRepository = contractRepository;
        this.personRepository = personRepository;
        this.modelMapper = modelMapper;
    }

    @Transactional
    public String createNewContract(@NonNull NewContractRequest request) {

        // Here we should also check that we don't have two identical insurance policies active at the same time

        PersonEntity customer = personRepository.findByCustomerIdentificationNumber(request.getCustomerIdentification()); // Exception if not found

        // ContractEntity#isActive by default set to false by our ModelMapperConfig
        ContractEntity contract = modelMapper.map(request, ContractEntity.class);
        contract.setPerson(customer);

        // This will be our contract identification but it should really be generated by an specific algorithm to conform to business standards
        contract.setContractIdentification(UUID.randomUUID());

        contractRepository.save(contract);

        return contract.getContractIdentification().toString();
    }
}
